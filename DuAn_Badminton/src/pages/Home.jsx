import { useEffect, useMemo, useRef, useState } from "react";
import { Link } from "react-router-dom";
import { api } from "../services/api.js";
import Footer from "../components/Footer.jsx";

function useAutoSlide(length, delay = 6000) {
  const [idx, setIdx] = useState(0);
  const timer = useRef(null);

  useEffect(() => {
    if (!length) return;
    timer.current = setInterval(() => {
      setIdx((i) => (i + 1) % length);
    }, delay);
    return () => clearInterval(timer.current);
  }, [length, delay]);

  return [idx, setIdx];
}

export default function Home() {
  const [classes, setClasses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");

  useEffect(() => {
    (async () => {
      try {
        const res = await api.get("/api/classes");
        const arr = res?.data || res || [];
        setClasses(Array.isArray(arr) ? arr : []);
      } catch {
        setErr("Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch kh√≥a h·ªçc");
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // üëâ N·∫øu ƒëang t·∫£i d·ªØ li·ªáu th√¨ hi·ªÉn th·ªã th√¥ng b√°o nh·∫π nh√†ng
  // üëâ Hooks PH·∫¢I ƒë·∫∑t tr∆∞·ªõc m·ªçi return s·ªõm
  const featured = useMemo(() => (classes || []).slice(0, 3), [classes]);
  const [slide, setSlide] = useAutoSlide(featured.length, 6000);

  // ‚¨áÔ∏è C√°c return s·ªõm d√πng SAU khi ƒë√£ g·ªçi hooks
  if (loading)
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-white">
        <p className="text-gray-500 text-lg animate-pulse">
          ƒêang t·∫£i d·ªØ li·ªáu...
        </p>
      </div>
    );

  if (err)
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-red-50">
        <p className="text-red-600 mb-3">{err}</p>
        <button
          className="px-4 py-2 rounded-xl border bg-white hover:bg-gray-100"
          onClick={() => window.location.reload()}
        >
          Th·ª≠ l·∫°i
        </button>
      </div>
    );
  return (
    <div>
      {/* ===== HERO / BANNER (t·ªëi ƒëa 3 kh√≥a h·ªçc) ===== */}
      <section className="bg-gradient-to-br from-blue-50 to-white border-b">
        <div className="max-w-6xl mx-auto px-4 pt-10 pb-16 md:pt-14 md:pb-20">
          <div className="grid md:grid-cols-2 gap-8 items-center relative">
            {/* N·ªôi dung tr√°i */}
            <div>
              <h1 className="text-3xl md:text-5xl font-extrabold leading-tight">
                {featured[slide]?.title || "L·ªõp h·ªçc c·∫ßu l√¥ng cho m·ªçi tr√¨nh ƒë·ªô"}
              </h1>
              <p className="mt-4 text-gray-600">
                {featured[slide]?.description ||
                  "Gi√°o tr√¨nh theo chu·∫©n BWF, HLV gi√†u kinh nghi·ªám, l·ªãch h·ªçc linh ho·∫°t."}
              </p>

              <div className="mt-6 flex flex-wrap items-center gap-3 text-sm">
                {(featured[slide]?.class_capacity ??
                  featured[slide]?.max_capacity) != null && (
                  <span className="inline-flex items-center gap-2 px-3 py-1.5 rounded-2xl border">
                    <span className="opacity-60">S·ª©c ch·ª©a:</span>
                    <b>
                      {featured[slide]?.class_capacity ??
                        featured[slide]?.max_capacity}
                    </b>
                    <span className="opacity-60">h·ªçc vi√™n</span>
                  </span>
                )}
                {(featured[slide]?.price ?? featured[slide]?.tuition) && (
                  <span className="inline-flex items-center gap-2 px-3 py-1.5 rounded-2xl border">
                    <span className="opacity-60">H·ªçc ph√≠:</span>
                    <b>{featured[slide]?.price ?? featured[slide]?.tuition}</b>
                  </span>
                )}
              </div>

              <div className="mt-6 flex gap-4">
                <Link
                  to={`/classes/${featured[slide]?.id ?? ""}`}
                  className="px-5 py-3 rounded-2xl bg-black text-white disabled:opacity-50"
                  onClick={(e) => !featured[slide]?.id && e.preventDefault()}
                >
                  ƒêƒÉng k√Ω ngay
                </Link>
                <Link to="/contact" className="px-5 py-3 rounded-2xl border">
                  Li√™n h·ªá t∆∞ v·∫•n
                </Link>
              </div>
            </div>

            {/* ·∫¢nh/placeholder ph·∫£i */}
            <div className="relative aspect-video rounded-2xl bg-gradient-to-tr from-gray-100 to-gray-50 border overflow-hidden">
              <div className="absolute inset-0 grid place-items-center">
                <div className="text-gray-400">H√¨nh ·∫£nh kh√≥a h·ªçc</div>
              </div>
            </div>

            {/* Ch·∫•m ƒëi·ªÅu h∆∞·ªõng D∆Ø·ªöI banner */}
            <div className="col-span-full mt-6 flex items-center justify-center gap-2">
              {featured.map((_, i) => (
                <button
                  key={i}
                  onClick={() => setSlide(i)}
                  className={`h-1.5 w-7 rounded-full transition ${
                    i === slide ? "bg-black" : "bg-gray-300 hover:bg-gray-400"
                  }`}
                  aria-label={`Slide ${i + 1}`}
                />
              ))}
            </div>

            {/* Ch√∫ th√≠ch l·ªói nh·ªè */}
            {err && (
              <div className="col-span-full mt-3 text-sm text-red-600 text-center">
                {err} ‚Äî vui l√≤ng th·ª≠ l·∫°i sau.
              </div>
            )}
          </div>
        </div>
      </section>
    </div>
  );
}
